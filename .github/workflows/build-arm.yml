name: Build ARM Native Image

on:
  push:
    branches:
      - master
    paths:
      - 'pom.xml'

jobs:
  build-arm:
    runs-on: macos-latest
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check if version changed
        id: version_check
        run: |
          CURRENT_VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" pom.xml)

          # Fetch minimal history to get previous pom.xml
          git fetch origin master --depth=2
          git show HEAD^:pom.xml > pom_old.xml || true
          PREVIOUS_VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" pom_old.xml || echo "")

          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"

          # Always set version for later steps
          echo "version=$CURRENT_VERSION" >> $GITHUB_ENV

          if [ "$CURRENT_VERSION" = "$PREVIOUS_VERSION" ]; then
            echo "changed=false" >> $GITHUB_ENV
            echo "No version change detected â€” skipping build."
          else
            echo "changed=true" >> $GITHUB_ENV
          fi

      - name: Configure Git user
        if: env.changed == 'true'
        run: |
            git config user.name "github-actions[bot]"
            git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Create and push new tag
        if: env.changed == 'true'
        run: |
          NEW_TAG="${{ env.version }}"
          git tag -a "$NEW_TAG" -m "New release: $NEW_TAG"
          git push origin "$NEW_TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cache SDKMAN
        uses: actions/cache@v4
        with:
            path: ~/.sdkman
            key: sdkman-${{ runner.os }}-${{ runner.arch }}-graal25ea28-maven4rc4

      - name: Set up GraalVM JDK
        if: env.changed == 'true'
        run: |
          if [ ! -f "$HOME/.sdkman/bin/sdkman-init.sh" ]; then
            curl -s "https://get.sdkman.io" | bash
          fi

          source "$HOME/.sdkman/bin/sdkman-init.sh"

          # Install only if not already cached
          if [ ! -d "$HOME/.sdkman/candidates/java/25.ea.28-graal" ]; then
            sdk install java 25.ea.28-graal
          fi

          if [ ! -d "$HOME/.sdkman/candidates/maven/4.0.0-rc-4" ]; then
            sdk install maven 4.0.0-rc-4
          fi

          sdk use java 25.ea.28-graal
          sdk use maven 4.0.0-rc-4
          java -version
          mvn -version

      - name: Clean Maven
        if: env.changed == 'true'
        run: mvn clean

      - name: Prepare Intel Build Directory
        if: env.changed == 'true'
        run: mkdir -p target/ARM

      - name: Build ARM native image
        if: env.changed == 'true'
        run: |
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          mvn -PnativeARM native:compile

      - name: Package ARM Artifact Into Zip and Tarball
        if: env.changed == 'true'
        run: |
          mv /Users/runner/work/SnapZap/SnapZap/target/ARM/SnapZap /Users/runner/work/SnapZap/SnapZap/target/ARM/snapzap
          tar -czvf snapzap-${{ env.version }}-macos-arm64.tar.gz -C /Users/runner/work/SnapZap/SnapZap/target/ARM snapzap
          zip -j snapzap-${{ env.version }}-macos-arm64.zip /Users/runner/work/SnapZap/SnapZap/target/ARM/snapzap
          

      - name: Upload to GitHub Release
        if: env.changed == 'true'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.version }}
          name: Version ${{ env.version }}
          body: |
            These native binaries were compiled with Github Actions, not my personal computer.

            # Installation Instructions

            ### Option 1 - Manual
            Download the zip file below for your architecture, then unzip the file into a folder that is in your PATH, such as `~/.local/bin`

            ### Option 2 - Homebrew

            ```BASH
            brew update
            brew tap EasyG0ing1/tools
            brew install snapzap
            ```

            The Homebrew option automatically determines which architecture you're running on and installs the correct native binary.
          files: |
            snapzap-${{ env.version }}-macos-arm64.tar.gz
            snapzap-${{ env.version }}-macos-arm64.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
