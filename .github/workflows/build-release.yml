name: Build & Release SnapZap (ARM64 + x64)

on:
  push:
    tags: [ 'v*' ]          # still supports tag-triggered runs
  workflow_dispatch: { }   # manual runs

permissions:
  contents: write         # create tags/releases and upload assets

env:
  MAVEN_VERSION: 4.0.0-rc-2
  GRAAL_JDK_TAG: jdk-25+33.1   # GraalVM CE build tag to download

jobs:
  build:
    name: Build ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: arm64
            runs-on: macos-14
            maven-profile: nativeARM
            suffix: macos-arm64
            bin_path: target/ARM/SnapZap
            graal_url: https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-25+33.1/graalvm-community-jdk-25_macos-aarch64_bin.tar.gz
          - arch: x64
            runs-on: macos-13
            maven-profile: nativeIntel
            suffix: macos-x64
            bin_path: target/Intel/SnapZap
            graal_url: https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-25+33.1/graalvm-community-jdk-25_macos-x64_bin.tar.gz
    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v4

      # ---- Install Maven (no setup-maven action; no deprecated cache) ----
      - name: Install Maven ${{ env.MAVEN_VERSION }}
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "https://archive.apache.org/dist/maven/maven-4/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz" -o maven.tgz
          mkdir -p "$HOME/.local"
          tar -xzf maven.tgz -C "$HOME/.local"
          echo "MAVEN_HOME=$HOME/.local/apache-maven-${MAVEN_VERSION}" >> $GITHUB_ENV
          echo "$HOME/.local/apache-maven-${MAVEN_VERSION}/bin" >> $GITHUB_PATH
          mvn -v

      # ---- Install GraalVM CE JDK 25 + native-image (download directly) ----
      - name: Install GraalVM CE 25 + native-image
        shell: bash
        run: |
          set -euo pipefail
          curl -fsSL "${{ matrix.graal_url }}" -o graalvm.tar.gz
          mkdir -p "$HOME/.graalvm"
          # unpack to $HOME/.graalvm (strip top folder)
          tar -xzf graalvm.tar.gz -C "$HOME/.graalvm" --strip-components=1
          echo "GRAALVM_HOME=$HOME/.graalvm" >> $GITHUB_ENV
          echo "JAVA_HOME=$HOME/.graalvm" >> $GITHUB_ENV
          echo "$HOME/.graalvm/bin" >> $GITHUB_PATH
          java -version
          gu install native-image

      - name: Resolve project version
        id: ver
        run: echo "value=$(mvn -q -Dexpression=project.version help:evaluate -DforceStdout)" >> "$GITHUB_OUTPUT"

      - name: Build native image (${{ matrix.maven-profile }})
        run: mvn clean -P${{ matrix.maven-profile }} -B -ntp -DskipTests native:compile

      - name: Package ${{ matrix.arch }} artifacts
        id: pkg
        shell: bash
        run: |
          set -euo pipefail
          VER='${{ steps.ver.outputs.value }}'
          SUF='${{ matrix.suffix }}'
          BIN='${{ matrix.bin_path }}'
          test -f "$BIN" || { echo "❌ Missing binary at $BIN"; ls -lR target || true; exit 1; }

          mkdir -p dist
          cp "$BIN" dist/snapzap   # normalize to lower-case name

          pushd dist >/dev/null
          TARBALL="snapzap-${VER}-${SUF}.tar.gz"
          ZIPBALL="snapzap-${VER}-${SUF}.zip"

          tar -czf "$TARBALL" snapzap
          shasum -a 256 "$TARBALL" | tee "../${TARBALL}.sha256"

          ditto -c -k --sequesterRsrc --keepParent snapzap "$ZIPBALL"
          shasum -a 256 "$ZIPBALL" | tee "../${ZIPBALL}.sha256"
          popd >/dev/null

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: snapzap-${{ steps.ver.outputs.value }}-${{ matrix.suffix }}
          path: |
            dist/snapzap-*.tar.gz
            dist/snapzap-*.zip
            *.sha256

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Resolve project version
        id: ver
        run: echo "value=$(mvn -q -Dexpression=project.version help:evaluate -DforceStdout)" >> "$GITHUB_OUTPUT"

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts

      - name: Build release body with real SHA256s
        id: body
        shell: bash
        run: |
          set -euo pipefail
          VER='${{ steps.ver.outputs.value }}'
      
          ARM_TGZ_SHA=$(awk '{print $1}' all-artifacts/**/snapzap-"$VER"-macos-arm64.tar.gz.sha256)
          X64_TGZ_SHA=$(awk '{print $1}' all-artifacts/**/snapzap-"$VER"-macos-x64.tar.gz.sha256)
          ARM_ZIP_SHA=$(awk '{print $1}' all-artifacts/**/snapzap-"$VER"-macos-arm64.zip.sha256)
          X64_ZIP_SHA=$(awk '{print $1}' all-artifacts/**/snapzap-"$VER"-macos-x64.zip.sha256)
      
          cat > body.md <<'EOF'
          These native binaries were compiled with Github Actions, not my personal computer.
  
          #Installation Instructions
  
          ###Option 1 - Manual
          Download the zip file below for your architecture, then unzip the file into a folder that is in your PATH, such as `~/.local/bin`
  
          ###Option 2 - Homebrew
  
          ```BASH
          brew update
          brew tap EasyG0ing1/tools
          brew install snapzap
          ```
