name: Build & Release SnapZap (ARM64 + x64)

on:
  push:
    tags: ['v*']
  workflow_dispatch: {}

permissions:
  contents: write

env:
  MAVEN_VERSION: 4.0.0-rc-2
  GRAAL_VERSION: 25.0.1
  GRAAL_BUILD: 25.0.1+1

jobs:
  build:
    name: Build ${{ matrix.arch }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: arm64
            runs-on: macos-14
            maven-profile: nativeARM
            suffix: macos-arm64
            bin_path: target/ARM/SnapZap
            graal_url: https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-${{ env.GRAAL_BUILD }}/graalvm-community-jdk-${{ env.GRAAL_VERSION }}_macos-aarch64_bin.tar.gz
          - arch: x64
            runs-on: macos-13
            maven-profile: nativeIntel
            suffix: macos-x64
            bin_path: target/Intel/SnapZap
            graal_url: https://github.com/graalvm/graalvm-ce-builds/releases/download/jdk-${{ env.GRAAL_BUILD }}/graalvm-community-jdk-${{ env.GRAAL_VERSION }}_macos-x64_bin.tar.gz
    runs-on: ${{ matrix.runs-on }}

    steps:
      - uses: actions/checkout@v4

      - name: Install Maven
        run: |
          set -euo pipefail
          curl -fsSL "https://archive.apache.org/dist/maven/maven-4/${MAVEN_VERSION}/binaries/apache-maven-${MAVEN_VERSION}-bin.tar.gz" -o maven.tgz
          mkdir -p "$HOME/.local"
          tar -xzf maven.tgz -C "$HOME/.local"
          echo "MAVEN_HOME=$HOME/.local/apache-maven-${MAVEN_VERSION}" >> $GITHUB_ENV
          echo "$HOME/.local/apache-maven-${MAVEN_VERSION}/bin" >> $GITHUB_PATH
          mvn -v

      - name: Install GraalVM CE + native-image
        run: |
          set -euo pipefail
          curl -fsSL "${{ matrix.graal_url }}" -o graalvm.tar.gz
          mkdir -p "$HOME/.graalvm"
          tar -xzf graalvm.tar.gz -C "$HOME/.graalvm" --strip-components=1
          echo "GRAALVM_HOME=$HOME/.graalvm" >> $GITHUB_ENV
          echo "JAVA_HOME=$HOME/.graalvm" >> $GITHUB_ENV
          echo "$HOME/.graalvm/bin" >> $GITHUB_PATH
          java -version
          gu install native-image

      - name: Resolve project version
        id: ver
        run: echo "value=$(mvn -q -Dexpression=project.version help:evaluate -DforceStdout)" >> "$GITHUB_OUTPUT"

      - name: Build native image
        run: mvn clean -P${{ matrix.maven-profile }} -B -ntp -DskipTests native:compile

      - name: Package artifacts
        run: |
          set -euo pipefail
          VER='${{ steps.ver.outputs.value }}'
          SUF='${{ matrix.suffix }}'
          BIN='${{ matrix.bin_path }}'
          test -f "$BIN" || { echo "❌ Missing binary at $BIN"; ls -lR target || true; exit 1; }

          mkdir -p dist
          cp "$BIN" dist/snapzap

          pushd dist >/dev/null
          TARBALL="snapzap-${VER}-${SUF}.tar.gz"
          ZIPBALL="snapzap-${VER}-${SUF}.zip"

          tar -czf "$TARBALL" snapzap
          shasum -a 256 "$TARBALL" | tee "../${TARBALL}.sha256"

          ditto -c -k --sequesterRsrc --keepParent snapzap "$ZIPBALL"
          shasum -a 256 "$ZIPBALL" | tee "../${ZIPBALL}.sha256"
          popd >/dev/null

      - uses: actions/upload-artifact@v4
        with:
          name: snapzap-${{ steps.ver.outputs.value }}-${{ matrix.suffix }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            *.sha256

  release:
    name: Create GitHub Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Resolve project version
        id: ver
        run: echo "value=$(mvn -q -Dexpression=project.version help:evaluate -DforceStdout)" >> "$GITHUB_OUTPUT"

      - uses: actions/download-artifact@v4
        with:
          path: ./all-artifacts

      - name: Build release body
        id: body
        run: |
          set -euo pipefail
          VER='${{ steps.ver.outputs.value }}'

          ARM_TGZ_SHA=$(awk '{print $1}' all-artifacts/**/snapzap-"$VER"-macos-arm64.tar.gz.sha256)
          X64_TGZ_SHA=$(awk '{print $1}' all-artifacts/**/snapzap-"$VER"-macos-x64.tar.gz.sha256)
          ARM_ZIP_SHA=$(awk '{print $1}' all-artifacts/**/snapzap-"$VER"-macos-arm64.zip.sha256)
          X64_ZIP_SHA=$(awk '{print $1}' all-artifacts/**/snapzap-"$VER"-macos-x64.zip.sha256)

          cat > body.md <<EOF
          These native binaries were compiled with GitHub Actions, not my personal computer.
  
          # Installation Instructions
  
          ### Option 1 - Manual
          Download the zip file for your architecture, then unzip into a folder in your PATH (e.g., ~/.local/bin).
  
          ### Option 2 - Homebrew
          \`\`\`bash
          brew update
          brew tap EasyG0ing1/tools
          brew install snapzap
          \`\`\`
          EOF
          echo "body=$(cat body.md)" >> "$GITHUB_OUTPUT"

      - uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.ver.outputs.value }}
          name: SnapZap ${{ steps.ver.outputs.value }}
          body_path: body.md
          files: |
            all-artifacts/**/snapzap-*.tar.gz
            all-artifacts/**/snapzap-*.zip
            all-artifacts/**/*.sha256
